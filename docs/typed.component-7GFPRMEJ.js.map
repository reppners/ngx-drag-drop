{
  "version": 3,
  "sources": ["projects/demo/src/app/typed/typed.component.ts", "projects/demo/src/app/typed/typed.component.html"],
  "sourcesContent": ["import { NgForOf } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { MatListModule } from '@angular/material/list';\nimport {\n  DndDraggableDirective,\n  DndDropEvent,\n  DndDropzoneDirective,\n  DndPlaceholderRefDirective,\n} from 'ngx-drag-drop';\n\ntype Apple = 'apple';\ntype Banana = 'banana';\ntype FruitType = Apple | Banana;\n\ninterface Fruit {\n  id: number;\n  type: FruitType;\n}\n\nlet id = 0;\n\nfunction createFruit(type: FruitType) {\n  return {\n    id: id++,\n    type: type,\n  };\n}\n\nfunction range(start: number, end: number) {\n  return Array.from({ length: end - start + 1 }, (_, i) => i);\n}\n\n@Component({\n  selector: 'dnd-typed',\n  templateUrl: './typed.component.html',\n  styleUrls: ['./typed.component.scss'],\n  standalone: true,\n  imports: [\n    MatListModule,\n    DndDropzoneDirective,\n    DndPlaceholderRefDirective,\n    NgForOf,\n    DndDraggableDirective,\n  ],\n})\nexport default class TypedComponent {\n  public fruits: Fruit[] = range(0, 100).map(_ => {\n    const randomFruitType: FruitType = Math.random() < 0.5 ? 'apple' : 'banana';\n    return createFruit(randomFruitType);\n  });\n\n  public apples: Fruit[] = range(0, 12).map(_ => {\n    return createFruit('apple');\n  });\n\n  public bananas: Fruit[] = range(0, 10).map(_ => {\n    return createFruit('banana');\n  });\n\n  trackByFruit(index: number, fruit: Fruit) {\n    return fruit;\n  }\n\n  onDragged(index: number, fruit: Fruit, list: Fruit[]) {\n    const removeIndex = list.indexOf(fruit);\n    console.log(\n      `onDragged ngFor-index=${index}, item=${fruit}, removeIndex=${removeIndex}, list=${list.length}`\n    );\n    list.splice(removeIndex, 1);\n  }\n\n  onDrop(event: DndDropEvent, list: Fruit[]) {\n    console.log('onDrop', event, list.length);\n    let index = event.index;\n    if (typeof index === 'undefined') {\n      index = list.length;\n    }\n    list.splice(index, 0, event.data);\n  }\n}\n", "<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col\">\n      <pre>Fruits</pre>\n      <mat-list\n        (dndDrop)=\"onDrop($event, fruits)\"\n        class=\"dndList gap-1 flex-grow-1 d-flex flex-column bg-light rounded-1 shadow-sm\"\n        dndDropzone\n        dndEffectAllowed=\"move\">\n        <mat-list-item\n          class=\"dndPlaceholder border rounded-1 bg-danger bg-gradient\"\n          dndPlaceholderRef>\n        </mat-list-item>\n        <mat-list-item\n          *ngFor=\"let fruit of fruits; let i = index; trackBy: trackByFruit\"\n          [dndDraggable]=\"fruit\"\n          [dndType]=\"fruit.type\"\n          (dndMoved)=\"onDragged(i, fruit, fruits)\"\n          class=\"border rounded-1 bg-white\"\n          dndEffectAllowed=\"move\">\n          <span matListItemTitle>{{ fruit.type }} {{ fruit.id }}</span>\n        </mat-list-item>\n      </mat-list>\n    </div>\n\n    <div class=\"col\">\n      <pre>Apples</pre>\n      <mat-list\n        [dndDropzone]=\"['apple']\"\n        (dndDrop)=\"onDrop($event, apples)\"\n        class=\"dndList gap-1 flex-grow-1 d-flex flex-column bg-light rounded-1 shadow-sm\"\n        dndEffectAllowed=\"move\">\n        <mat-list-item\n          class=\"dndPlaceholder border rounded-1 bg-success bg-gradient\"\n          dndPlaceholderRef>\n        </mat-list-item>\n        <mat-list-item\n          *ngFor=\"let apple of apples; let i = index; trackBy: trackByFruit\"\n          [dndDraggable]=\"apple\"\n          [dndType]=\"apple.type\"\n          (dndMoved)=\"onDragged(i, apple, apples)\"\n          class=\"border rounded-1 bg-white\"\n          dndEffectAllowed=\"move\">\n          <span matListItemTitle>{{ apple.type }} {{ apple.id }}</span>\n        </mat-list-item>\n      </mat-list>\n    </div>\n\n    <div class=\"col\">\n      <pre>Bananas</pre>\n      <mat-list\n        [dndDropzone]=\"['banana']\"\n        (dndDrop)=\"onDrop($event, bananas)\"\n        class=\"dndList gap-1 flex-grow-1 d-flex flex-column bg-light rounded-1 shadow-sm\"\n        dndEffectAllowed=\"move\">\n        <mat-list-item\n          class=\"dndPlaceholder border rounded-1 bg-warning bg-gradient\"\n          dndPlaceholderRef>\n        </mat-list-item>\n        <mat-list-item\n          *ngFor=\"let banana of bananas; let i = index; trackBy: trackByFruit\"\n          [dndDraggable]=\"banana\"\n          [dndType]=\"banana.type\"\n          (dndMoved)=\"onDragged(i, banana, bananas)\"\n          class=\"border rounded-1 bg-white\"\n          dndEffectAllowed=\"move\">\n          <span matListItemTitle>{{ banana.type }} {{ banana.id }}</span>\n        </mat-list-item>\n      </mat-list>\n    </div>\n  </div>\n</div>\n"],
  "mappings": "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",
  "names": []
}
